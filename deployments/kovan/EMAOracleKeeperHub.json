{
  "address": "0xD1f120cb15E9722D6a727BA274D125C97f5447dB",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "addOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getOracleAt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "query",
          "type": "address"
        }
      ],
      "name": "isOracle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numOracles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "removeOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f57f42a4898855b94c6fe660aa88ca7e89f73c2f53ed95dabfcd444654546a6",
  "receipt": {
    "to": null,
    "from": "0xc0FcF8403e10B65f1D18f1B81b093004B1127275",
    "contractAddress": "0xD1f120cb15E9722D6a727BA274D125C97f5447dB",
    "transactionIndex": 3,
    "gasUsed": "732091",
    "logsBloom": "0x
    "blockHash": "0xc779e5076df38d52c83689d2117b036e69e6b01311e43b2ddf80821ffb8dec1a",
    "transactionHash": "0x5f57f42a4898855b94c6fe660aa88ca7e89f73c2f53ed95dabfcd444654546a6",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 24245288,
        "transactionHash": "0x5f57f42a4898855b94c6fe660aa88ca7e89f73c2f53ed95dabfcd444654546a6",
        "address": "0xD1f120cb15E9722D6a727BA274D125C97f5447dB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c0fcf8403e10b65f1d18f1b81b093004b1127275"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xc779e5076df38d52c83689d2117b036e69e6b01311e43b2ddf80821ffb8dec1a"
      }
    ],
    "blockNumber": 24245288,
    "cumulativeGasUsed": "898648",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1d008e6aeac3ecd01921c93257ae32f9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"addOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOracleAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"isOracle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOracles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"removeOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performUpkeep(bytes)\":{\"details\":\"The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.\",\"params\":{\"performData\":\"is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addOracle(address)\":{\"notice\":\"Oracle registration\"},\"checkUpkeep(bytes)\":{\"notice\":\"IKeeperCompatible override\"},\"numOracles()\":{\"notice\":\"Oracle getters\"},\"performUpkeep(bytes)\":{\"notice\":\"method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EMAOracleKeeperHub.sol\":\"EMAOracleKeeperHub\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x71e0d1cc75b67306382e055b789b6d3ffe34a9e2e55380d3c9895a36a42229e1\",\"license\":\"MIT\"},\"contracts/EMAOracleKeeperHub.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-v3-or-later\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IKeeperCompatible.sol\\\";\\nimport \\\"./interfaces/IEMAOracle.sol\\\";\\n\\ncontract EMAOracleKeeperHub is IKeeperCompatible, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet internal _oracles;\\n    address[] internal _dynamicArray; // A hack for implementing a array with modifiable length\\n\\n    modifier useDynamicArray {\\n        _;\\n        delete _dynamicArray;\\n    }\\n\\n    /**\\n        Oracle registration\\n     */\\n    function addOracle(address oracle) external onlyOwner {\\n        _oracles.add(oracle);\\n    }\\n\\n    function removeOracle(address oracle) external onlyOwner {\\n        _oracles.remove(oracle);\\n    }\\n\\n    /**\\n        Oracle getters\\n     */\\n    function numOracles() external view returns (uint256) {\\n        return _oracles.length();\\n    }\\n\\n    function isOracle(address query) external view returns (bool) {\\n        return _oracles.contains(query);\\n    }\\n\\n    function getOracleAt(uint256 index) external view returns (address) {\\n        return _oracles.at(index);\\n    }\\n\\n    /**\\n        IKeeperCompatible override\\n     */\\n    function checkUpkeep(bytes calldata checkData)\\n        external\\n        override\\n        useDynamicArray\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        address[] storage oraclesToUpdate = _dynamicArray;\\n        for (uint256 i = 0; i < _oracles.length(); i++) {\\n            IEMAOracle oracle = IEMAOracle(_oracles.at(i));\\n            (bool updated, ) = oracle.updateAndQuery();\\n            if (updated) {\\n                if (!upkeepNeeded) {\\n                    upkeepNeeded = true;\\n                }\\n\\n                oraclesToUpdate.push(address(oracle));\\n            }\\n        }\\n        if (upkeepNeeded) {\\n            performData = abi.encode(oraclesToUpdate);\\n        }\\n    }\\n\\n    function performUpkeep(bytes calldata performData) external override {\\n        address[] memory oraclesToUpdate = abi.decode(performData, (address[]));\\n        for (uint256 i = 0; i < oraclesToUpdate.length; i++) {\\n            IEMAOracle oracle = IEMAOracle(oraclesToUpdate[i]);\\n            (bool updated, ) = oracle.updateAndQuery();\\n            require(updated, \\\"EMAOracleKeeperHub: oracle not updated\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa97d5bc747eabbd34e94d5985d816a3d04c4ea8e44794291fec19e867f6b3ece\",\"license\":\"GPL-v3-or-later\"},\"contracts/interfaces/IEMAOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.3;\\n\\ninterface IEMAOracle {\\n    function updateAndQuery() external returns (bool updated, uint256 value);\\n\\n    function UPDATE_INTERVAL() external view returns (uint256);\\n\\n    function lastUpdateTimestamp() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x648f8c8797a9ca7e1a8e0c383f35a905188bc678a9bef0f9614a4df1825bc12c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IKeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity 0.8.3;\\n\\ninterface IKeeperCompatible {\\n    /**\\n     * @notice method that is simulated by the keepers to see if any work actually\\n     * needs to be performed. This method does does not actually need to be\\n     * executable, and since it is only ever simulated it can consume lots of gas.\\n     * @dev To ensure that it is never called, you may want to add the\\n     * cannotExecute modifier from KeeperBase to your implementation of this\\n     * method.\\n     * @param checkData specified in the upkeep registration so it is always the\\n     * same for a registered upkeep. This can easily be broken down into specific\\n     * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n     * same contract and easily differentiated by the contract.\\n     * @return upkeepNeeded boolean to indicate whether the keeper should call\\n     * performUpkeep or not.\\n     * @return performData bytes that the keeper should call performUpkeep with, if\\n     * upkeep is needed. If you would like to encode data to decode later, try\\n     * `abi.encode`.\\n     */\\n    function checkUpkeep(bytes calldata checkData)\\n        external\\n        returns (bool upkeepNeeded, bytes memory performData);\\n\\n    /**\\n     * @notice method that is actually executed by the keepers, via the registry.\\n     * The data returned by the checkUpkeep simulation will be passed into\\n     * this method to actually be executed.\\n     * @dev The input to this method should not be trusted, and the caller of the\\n     * method should not even be restricted to any single registry. Anyone should\\n     * be able call it, and the input should be validated, there is no guarantee\\n     * that the data passed in is the performData returned from checkUpkeep. This\\n     * could happen due to malicious keepers, racing keepers, or simply a state\\n     * change while the performUpkeep transaction is waiting for confirmation.\\n     * Always validate the data passed in.\\n     * @param performData is the data which was passed back from the checkData\\n     * simulation. If it is encoded, it can easily be decoded into other types by\\n     * calling `abi.decode`. This data should not be trusted, and should be\\n     * validated against the contract's current state.\\n     */\\n    function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x84757af3d4b2bc7f152d04489749e0bed17a7bee764c149d1b4562172a4dcbd9\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610bdd806100616000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a97e5c9311610066578063a97e5c9314610125578063b18f95f814610148578063df5dd1a51461015b578063f2fde38b1461016e578063fdc85fc4146101815761009e565b80634585e33b146100a35780636e04ff0d146100b8578063715018a6146100e2578063898de999146100ea5780638da5cb5b14610100575b600080fd5b6100b66100b13660046109ca565b610194565b005b6100cb6100c63660046109ca565b6102cf565b6040516100d9929190610a9f565b60405180910390f35b6100b66103fd565b6100f2610471565b6040519081526020016100d9565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100d9565b6101386101333660046108b8565b610482565b60405190151581526020016100d9565b61010d610156366004610a37565b610497565b6100b66101693660046108b8565b6104a4565b6100b661017c3660046108b8565b6104dd565b6100b661018f3660046108b8565b6105c7565b60006101a2828401846108d2565b905060005b81518110156102c95760008282815181106101d257634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166385b3a9316040518163ffffffff1660e01b81526004016040805180830381600087803b15801561021857600080fd5b505af115801561022c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102509190610999565b509050806102b45760405162461bcd60e51b815260206004820152602660248201527f454d414f7261636c654b65657065724875623a206f7261636c65206e6f7420756044820152651c19185d195960d21b60648201526084015b60405180910390fd5b505080806102c190610b60565b9150506101a7565b50505050565b600060606003825b6102e160016105fc565b8110156103bf5760006102f5600183610606565b90506000816001600160a01b03166385b3a9316040518163ffffffff1660e01b81526004016040805180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190610999565b50905080156103aa578561037e57600195505b83546001810185556000858152602090200180546001600160a01b0319166001600160a01b0384161790555b505080806103b790610b60565b9150506102d7565b5082156103e957806040516020016103d79190610a4f565b60405160208183030381529060405291505b506103f660036000610867565b9250929050565b6000546001600160a01b031633146104275760405162461bcd60e51b81526004016102ab90610afc565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600061047d60016105fc565b905090565b600061048f60018361061b565b90505b919050565b600061048f600183610606565b6000546001600160a01b031633146104ce5760405162461bcd60e51b81526004016102ab90610afc565b6104d960018261063d565b5050565b6000546001600160a01b031633146105075760405162461bcd60e51b81526004016102ab90610afc565b6001600160a01b03811661056c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ab565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105f15760405162461bcd60e51b81526004016102ab90610afc565b6104d9600182610652565b600061048f825490565b60006106128383610667565b90505b92915050565b6001600160a01b03811660009081526001830160205260408120541515610612565b6000610612836001600160a01b0384166106fb565b6000610612836001600160a01b03841661074a565b815460009082106106c55760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016102ab565b8260000182815481106106e857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600081815260018301602052604081205461074257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610615565b506000610615565b6000818152600183016020526040812054801561085d57600061076e600183610b49565b855490915060009061078290600190610b49565b905060008660000182815481106107a957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106107da57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001556107f1836001610b31565b6000828152600189016020526040902055865487908061082157634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610615565b6000915050610615565b50805460008255906000526020600020908101906108859190610888565b50565b5b8082111561089d5760008155600101610889565b5090565b80356001600160a01b038116811461049257600080fd5b6000602082840312156108c9578081fd5b610612826108a1565b600060208083850312156108e4578182fd5b823567ffffffffffffffff808211156108fb578384fd5b818501915085601f83011261090e578384fd5b81358181111561092057610920610b91565b8060051b604051601f19603f8301168101818110858211171561094557610945610b91565b604052828152858101935084860182860187018a1015610963578788fd5b8795505b8386101561098c57610978816108a1565b855260019590950194938601938601610967565b5098975050505050505050565b600080604083850312156109ab578081fd5b825180151581146109ba578182fd5b6020939093015192949293505050565b600080602083850312156109dc578182fd5b823567ffffffffffffffff808211156109f3578384fd5b818501915085601f830112610a06578384fd5b813581811115610a14578485fd5b866020828501011115610a25578485fd5b60209290920196919550909350505050565b600060208284031215610a48578081fd5b5035919050565b6020808252825482820181905260008481528281209092916040850190845b81811015610a935783546001600160a01b031683526001938401939285019201610a6e565b50909695505050505050565b6000831515825260206040818401528351806040850152825b81811015610ad457858101830151858201606001528201610ab8565b81811115610ae55783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b4457610b44610b7b565b500190565b600082821015610b5b57610b5b610b7b565b500390565b6000600019821415610b7457610b74610b7b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212208a0b90ac1a64a5315f1883080499515dc4915e5a09c3299041b1a8db65053d8b64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063a97e5c9311610066578063a97e5c9314610125578063b18f95f814610148578063df5dd1a51461015b578063f2fde38b1461016e578063fdc85fc4146101815761009e565b80634585e33b146100a35780636e04ff0d146100b8578063715018a6146100e2578063898de999146100ea5780638da5cb5b14610100575b600080fd5b6100b66100b13660046109ca565b610194565b005b6100cb6100c63660046109ca565b6102cf565b6040516100d9929190610a9f565b60405180910390f35b6100b66103fd565b6100f2610471565b6040519081526020016100d9565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100d9565b6101386101333660046108b8565b610482565b60405190151581526020016100d9565b61010d610156366004610a37565b610497565b6100b66101693660046108b8565b6104a4565b6100b661017c3660046108b8565b6104dd565b6100b661018f3660046108b8565b6105c7565b60006101a2828401846108d2565b905060005b81518110156102c95760008282815181106101d257634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166385b3a9316040518163ffffffff1660e01b81526004016040805180830381600087803b15801561021857600080fd5b505af115801561022c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102509190610999565b509050806102b45760405162461bcd60e51b815260206004820152602660248201527f454d414f7261636c654b65657065724875623a206f7261636c65206e6f7420756044820152651c19185d195960d21b60648201526084015b60405180910390fd5b505080806102c190610b60565b9150506101a7565b50505050565b600060606003825b6102e160016105fc565b8110156103bf5760006102f5600183610606565b90506000816001600160a01b03166385b3a9316040518163ffffffff1660e01b81526004016040805180830381600087803b15801561033357600080fd5b505af1158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b9190610999565b50905080156103aa578561037e57600195505b83546001810185556000858152602090200180546001600160a01b0319166001600160a01b0384161790555b505080806103b790610b60565b9150506102d7565b5082156103e957806040516020016103d79190610a4f565b60405160208183030381529060405291505b506103f660036000610867565b9250929050565b6000546001600160a01b031633146104275760405162461bcd60e51b81526004016102ab90610afc565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b600061047d60016105fc565b905090565b600061048f60018361061b565b90505b919050565b600061048f600183610606565b6000546001600160a01b031633146104ce5760405162461bcd60e51b81526004016102ab90610afc565b6104d960018261063d565b5050565b6000546001600160a01b031633146105075760405162461bcd60e51b81526004016102ab90610afc565b6001600160a01b03811661056c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ab565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146105f15760405162461bcd60e51b81526004016102ab90610afc565b6104d9600182610652565b600061048f825490565b60006106128383610667565b90505b92915050565b6001600160a01b03811660009081526001830160205260408120541515610612565b6000610612836001600160a01b0384166106fb565b6000610612836001600160a01b03841661074a565b815460009082106106c55760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016102ab565b8260000182815481106106e857634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b600081815260018301602052604081205461074257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610615565b506000610615565b6000818152600183016020526040812054801561085d57600061076e600183610b49565b855490915060009061078290600190610b49565b905060008660000182815481106107a957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050808760000184815481106107da57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001556107f1836001610b31565b6000828152600189016020526040902055865487908061082157634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610615565b6000915050610615565b50805460008255906000526020600020908101906108859190610888565b50565b5b8082111561089d5760008155600101610889565b5090565b80356001600160a01b038116811461049257600080fd5b6000602082840312156108c9578081fd5b610612826108a1565b600060208083850312156108e4578182fd5b823567ffffffffffffffff808211156108fb578384fd5b818501915085601f83011261090e578384fd5b81358181111561092057610920610b91565b8060051b604051601f19603f8301168101818110858211171561094557610945610b91565b604052828152858101935084860182860187018a1015610963578788fd5b8795505b8386101561098c57610978816108a1565b855260019590950194938601938601610967565b5098975050505050505050565b600080604083850312156109ab578081fd5b825180151581146109ba578182fd5b6020939093015192949293505050565b600080602083850312156109dc578182fd5b823567ffffffffffffffff808211156109f3578384fd5b818501915085601f830112610a06578384fd5b813581811115610a14578485fd5b866020828501011115610a25578485fd5b60209290920196919550909350505050565b600060208284031215610a48578081fd5b5035919050565b6020808252825482820181905260008481528281209092916040850190845b81811015610a935783546001600160a01b031683526001938401939285019201610a6e565b50909695505050505050565b6000831515825260206040818401528351806040850152825b81811015610ad457858101830151858201606001528201610ab8565b81811115610ae55783606083870101525b50601f01601f191692909201606001949350505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610b4457610b44610b7b565b500190565b600082821015610b5b57610b5b610b7b565b500390565b6000600019821415610b7457610b74610b7b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212208a0b90ac1a64a5315f1883080499515dc4915e5a09c3299041b1a8db65053d8b64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performUpkeep(bytes)": {
        "details": "The input to this method should not be trusted, and the caller of the method should not even be restricted to any single registry. Anyone should be able call it, and the input should be validated, there is no guarantee that the data passed in is the performData returned from checkUpkeep. This could happen due to malicious keepers, racing keepers, or simply a state change while the performUpkeep transaction is waiting for confirmation. Always validate the data passed in.",
        "params": {
          "performData": "is the data which was passed back from the checkData simulation. If it is encoded, it can easily be decoded into other types by calling `abi.decode`. This data should not be trusted, and should be validated against the contract's current state."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addOracle(address)": {
        "notice": "Oracle registration"
      },
      "checkUpkeep(bytes)": {
        "notice": "IKeeperCompatible override"
      },
      "numOracles()": {
        "notice": "Oracle getters"
      },
      "performUpkeep(bytes)": {
        "notice": "method that is actually executed by the keepers, via the registry. The data returned by the checkUpkeep simulation will be passed into this method to actually be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/EMAOracleKeeperHub.sol:EMAOracleKeeperHub",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 664,
        "contract": "contracts/EMAOracleKeeperHub.sol:EMAOracleKeeperHub",
        "label": "_oracles",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)420_storage"
      },
      {
        "astId": 667,
        "contract": "contracts/EMAOracleKeeperHub.sol:EMAOracleKeeperHub",
        "label": "_dynamicArray",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)420_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 419,
            "contract": "contracts/EMAOracleKeeperHub.sol:EMAOracleKeeperHub",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)143_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)143_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 138,
            "contract": "contracts/EMAOracleKeeperHub.sol:EMAOracleKeeperHub",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 142,
            "contract": "contracts/EMAOracleKeeperHub.sol:EMAOracleKeeperHub",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}